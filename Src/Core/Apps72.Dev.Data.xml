<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apps72.Dev.Data</name>
    </assembly>
    <members>
        <member name="T:Apps72.Dev.Data.Annotations.ColumnAttribute">
            <summary>
            Specifies the database column that a property is mapped to.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Annotations.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ColumnAttribute.
            </summary>
            <param name="name">The name of the column the property is mapped to.</param>
        </member>
        <member name="P:Apps72.Dev.Data.Annotations.ColumnAttribute.Name">
            <summary>
            Gets the name of the column the property is mapped to.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Annotations.ColumnAttribute.GetColumnAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Returns the Column attribute for the specified property.
            </summary>
            <param name="property">Property</param>
            <returns>Column attribute or null if not found</returns>
        </member>
        <member name="M:Apps72.Dev.Data.Annotations.ColumnAttribute.GetColumnAttributeName(System.Reflection.PropertyInfo)">
            <summary>
            Returns the Column.Name attribute for the specified property.
            </summary>
            <param name="property">Property</param>
            <returns>Column.Name attribute or String.Empty if not found</returns>
        </member>
        <member name="T:Apps72.Dev.Data.CommandTextFormatted">
            <summary>
            Manage the CommantText to display SQL Query including parameters. x
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.CommandTextFormatted.#ctor(Apps72.Dev.Data.DatabaseCommand)">
            <summary>
            Initializes a new instance of CommandTextFormatted
            </summary>
            <param name="command"></param>
        </member>
        <member name="P:Apps72.Dev.Data.CommandTextFormatted.CommandAsText">
            <summary>
            Gets the <see cref="P:Apps72.Dev.Data.DatabaseCommand.CommandText"/> 
            with parameters replaced by values.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.CommandTextFormatted.CommandAsHtml">
            <summary>
            Gets the <see cref="P:Apps72.Dev.Data.DatabaseCommand.CommandText"/> 
            with parameters replaced by values, and colorized using HTML tags.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.CommandTextFormatted.CommandAsVariables">
            <summary>
            Gets the <see cref="P:Apps72.Dev.Data.DatabaseCommand.CommandText"/> 
            with parameters replaced by SQL variable delcarations.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.CommandTextFormatted.GetSqlFormatted(Apps72.Dev.Data.QueryFormat)">
            <summary>
            Gets the CommandText formatted with specified format
            </summary>
            <param name="format">Use Text to format as Simple SQL Query or use HTML to format as Colored SQL Query.</param>
            <returns>Formatted query</returns>
        </member>
        <member name="M:Apps72.Dev.Data.CommandTextFormatted.GetQueryFormattedAsText(Apps72.Dev.Data.DatabaseCommand)">
            <summary>
            Returns the CommandText with all parameter values included.
            </summary>
            <param name="command">DBCommand to manage</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.CommandTextFormatted.GetQueryFormattedAsHtml(Apps72.Dev.Data.DatabaseCommand)">
            <summary>
            Format the SQL command in HTML (coloring, ...)
            </summary>
            <param name="command">Command to format in HTML</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.CommandTextFormatted.GetQueryFormattedAsVariables(Apps72.Dev.Data.DatabaseCommand)">
            <summary>
            Format the SQL command with parameters as variables.
            </summary>
            <param name="command">Command to format</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.CommandTextFormatted.GetValueFormatted(System.Data.Common.DbParameter)">
            <summary>
            Returns the parameter value formatted for SQL request (ex. ABC => 'ABC', 12/01/1972 => '1972-01-12', ...) 
            </summary>
            <param name="parameter">Parameter to format</param>
            <returns>Parameter value formatted</returns>
        </member>
        <member name="T:Apps72.Dev.Data.QueryFormat">
            <summary>
            Type of SQL formats
            </summary>
        </member>
        <member name="F:Apps72.Dev.Data.QueryFormat.Text">
            <summary>
            SQL Command Text included parameters values
            </summary>
        </member>
        <member name="F:Apps72.Dev.Data.QueryFormat.Html">
            <summary>
            SQL Command Text formatted in HTML for coloring, ...
            </summary>
        </member>
        <member name="F:Apps72.Dev.Data.QueryFormat.Variables">
            <summary>
            SQL Command Text formatted with parameters as variable declarations, ...
            </summary>
        </member>
        <member name="T:Apps72.Dev.Data.DatabaseCommand">
            <summary />
            <summary>
             Base class with common methods to retrieve or manage data.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.#ctor(System.Data.Common.DbConnection,Apps72.Dev.Data.SqlString)">
            <summary>
            Create a command for a specified <paramref name="connection"/>
            </summary>
            <param name="connection">Active connection</param>
            <param name="commandText">SQL query</param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.#ctor(System.Data.Common.DbConnection,System.Int32)">
            <summary>
            Create a command for a specified <paramref name="connection"/>
            </summary>
            <param name="connection">Active connection</param>
            <param name="commandTimeout">Maximum timeout of the queries</param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.#ctor(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Create a command for a specified <paramref name="transaction"/>
            </summary>
            <param name="transaction">The transaction in which the SQL Query executes</param>
            <param name="commandText">SQL query</param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.#ctor(System.Data.Common.DbTransaction,System.Int32)">
            <summary>
            Create a command for a specified <paramref name="transaction"/>
            </summary>
            <param name="transaction">The transaction in which the SQL Query executes</param>
            <param name="commandTimeout">Maximum timeout of the queries</param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.#ctor(System.Data.Common.DbTransaction,System.String,System.Int32)">
            <summary>
            Create a command for a specified <paramref name="transaction"/>
            </summary>
            <param name="transaction">The transaction in which the SQL Query executes</param>
            <param name="commandText">SQL query</param>
            <param name="commandTimeout">Maximum timeout of the queries</param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create a command for a specified <paramref name="transaction"/>
            </summary>
            <param name="connection">Active connection</param>
            <param name="transaction"></param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Query">
            <summary>
            Returns a Fluent Query tool to execute SQL request.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Query``1(Apps72.Dev.Data.SqlString,``0)">
            <summary>
            Returns a Fluent Query tool to execute SQL request.
            </summary>
            <param name="commandText">Sql query</param>
            <param name="values">Paremeters</param>
        </member>
        <member name="T:Apps72.Dev.Data.DatabaseCommand.ExceptionOccuredEventHandler">
            <summary>
            Signature for ExceptionOccured event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Apps72.Dev.Data.DatabaseCommand.ExceptionOccured">
            <summary>
            Event raised when an SQL Exception occured (in Execute Methods)
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Create a command for a specified <paramref name="connection"/>
            </summary>
            <param name="connection">Active connection</param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.#ctor(System.Data.Common.DbTransaction)">
            <summary>
            Create a command for a specified <paramref name="transaction"/>
            </summary>
            <param name="transaction">The transaction in which the SQL Query executes</param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.#ctor(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,Apps72.Dev.Data.SqlString,System.Int32)">
            <summary>
            Create a command for a SQL Server connection
            </summary>
            <param name="command">Active command with predefined CommandText and Connection</param>
            <param name="transaction">The transaction in which the SQL Query executes</param>
            <param name="commandText">The command text to execute</param>
            <param name="commandTimeout">the wait time (in seconds) before terminating the attempt to execute a command and generating an error.</param>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.CommandText">
            <summary>
            Gets or sets the sql query
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Query(Apps72.Dev.Data.SqlString)">
            <summary>
            Returns a Fluent Query tool to execute SQL request.
            </summary>
            <param name="commandText">SQL query command</param>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Exception">
            <summary>
            Gets the last raised exception 
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.CommandType">
            <summary>
            Gets or sets the command type
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds, before terminating the attempt to execute a command
            and generating an error.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Connection">
            <summary>
            Gets or sets the current active connection
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Command">
            <summary>
            Gets the current DbCommand
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Transaction">
            <summary>
            Gets or sets the current transaction
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Parameters">
            <summary>
            Gets sql parameters of the query
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Tags">
            <summary>
            Gets a list of tags, used to annotate the SQL query (using SQL comments)
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.ThrowException">
            <summary>
            Enable or disable the raise of exceptions when queries are executed.
            Default is True (Enabled).
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Log">
            <summary>
            Set this property to log the SQL generated by this class to the given delegate. 
            For example, to log to the console, set this property to Console.Write.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.ActionBeforeExecution">
            <summary>
            Set this property to execute an action immediately BEFORE the database request.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.ActionAfterExecution">
            <summary>
            Set this property to execute an action immediately AFTER the database request,
            and before the type convertions.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Formatted">
            <summary>
            Gets the <see cref="P:Apps72.Dev.Data.DatabaseCommand.CommandText"/> where parameters are filled by values.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.WithTag(System.String)">
            <summary>
            Annotate the SQL query with a tag (as a SQL comment)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Clear">
            <summary>
            Delete the CommandText and the all sql parameters
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Prepare">
            <summary>
            Prepare a query
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.TransactionBegin">
            <summary>
            Begin a transaction into the database
            </summary>
            <returns>Transaction</returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.TransactionCommit">
            <summary>
            Commit the current transaction to the database
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.TransactionRollback">
            <summary>
            Rollback the current transaction 
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteDataSet``2">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <returns>List of array of typed results</returns>
            <example>
            <code>
              var data = cmd.ExecuteDataSet&lt;Employee, Department&gt;();
              var employees = data.Item1;
              var departments = data.Item2;
            </code>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteDataSet``3">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <returns>List of array of typed results</returns>
            <example>
            <code>
              var data = cmd.ExecuteDataSet&lt;Employee, Department&gt;();
              var employees = data.Item1;
              var departments = data.Item2;
            </code>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteDataSet``4">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <typeparam name="W">Object type for fourth table</typeparam>
            <returns>List of array of typed results</returns>
            <example>
            <code>
              var data = cmd.ExecuteDataSet&lt;Employee, Department&gt;();
              var employees = data.Item1;
              var departments = data.Item2;
            </code>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteDataSet``5">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <typeparam name="W">Object type for fourth table</typeparam>
            <typeparam name="X">Object type for fifth table</typeparam>
            <returns>List of array of typed results</returns>
            <example>
            <code>
              var data = cmd.ExecuteDataSet&lt;Employee, Department&gt;();
              var employees = data.Item1;
              var departments = data.Item2;
            </code>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteDataSet``2(``0,``1)">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <returns>List of array of typed results</returns>
            <example>
            <code>
              var data = cmd.ExecuteDataSet&lt;Employee, Department&gt;();
              var employees = data.Item1;
              var departments = data.Item2;
            </code>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteDataSet``3(``0,``1,``2)">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <returns>List of array of typed results</returns>
            <example>
            <code>
              var data = cmd.ExecuteDataSet&lt;Employee, Department&gt;();
              var employees = data.Item1;
              var departments = data.Item2;
            </code>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteDataSet``4(``0,``1,``2,``3)">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <typeparam name="W">Object type for fourth table</typeparam>
            <returns>List of array of typed results</returns>
            <example>
            <code>
              var data = cmd.ExecuteDataSet&lt;Employee, Department&gt;();
              var employees = data.Item1;
              var departments = data.Item2;
            </code>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteDataSet``5(``0,``1,``2,``3,``4)">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <typeparam name="W">Object type for fourth table</typeparam>
            <typeparam name="X">Object type for fifth table</typeparam>
            <returns>List of array of typed results</returns>
            <example>
            <code>
              var data = cmd.ExecuteDataSet&lt;Employee, Department&gt;();
              var employees = data.Item1;
              var departments = data.Item2;
            </code>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteTable``1">
            <summary>
            Execute the query and return an array of new instances of typed results filled with data table result.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>Array of typed results</returns>
            <example>
            <code>
              Employee[] emp = cmd.ExecuteTable&lt;Employee&gt;();
              var x = cmd.ExecuteTable&lt;Employee&gt;();
            </code>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteTable``1(System.Func{Apps72.Dev.Data.Schema.DataRow,``0})">
            <summary>
            Execute the query and return an array of new instances of typed results filled with data table result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="converter"></param>
            <returns>Array of typed results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteTable``1(``0)">
            <summary>
            Execute the query and return an array of new instances of typed results filled with data table result.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="itemOftype"></param>
            <returns>Array of typed results</returns>
            <example>
            <code>
              Employee emp = new Employee();
              var x = cmd.ExecuteTable(new { emp.Age, emp.Name });
              var y = cmd.ExecuteTable(new { Age = 0, Name = "" });
            </code>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteRow``1">
            <summary>
            Execute the query and return a new instance of T with the first row of results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>First row of results</returns>
            <example>
            <code>
              Employee emp = cmd.ExecuteRow&lt;Employee&gt;();
            </code>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteRow``1(``0)">
            <summary>
            Execute the query and fill the specified T object with the first row of results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="itemOftype"></param>
            <returns>First row of results</returns>
            <example>
            <code>
              Employee emp = new Employee();
              var x = cmd.ExecuteRow(new { emp.Age, emp.Name });
              var y = cmd.ExecuteRow(new { Age = 0, Name = "" });
              var z = cmd.ExecuteRow(emp);
            </code>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteRow``1(System.Func{Apps72.Dev.Data.Schema.DataRow,``0})">
            <summary>
            Execute the query and fill the specified T object with the first row of results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="converter"></param>
            <returns>First row of results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteNonQuery">
            <summary>
            Execute the query and return the count of modified rows
            </summary>
            <returns>Count of modified rows</returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteScalar">
            <summary>
            Execute the query and return the first column of the first row of results
            </summary>
            <returns>Object - Result</returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteScalar``1">
            <summary>
            Execute the query and return the first column of the first row of results
            </summary>
            <typeparam name="T">Return type</typeparam>
            <returns>Result</returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.AddParameter(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Adds a value to the end of the <see cref="P:Apps72.Dev.Data.DatabaseCommand.Parameters"/> property.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to be added. Null value will be replaced by System.DBNull.Value.</param>
            <param name="type">Type of parameter.</param>
            <param name="size">Size of parameter</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.AddParameter(System.String,System.Object)">
            <summary>
            Adds a value to the end of the <see cref="P:Apps72.Dev.Data.DatabaseCommand.Parameters"/> property.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to be added. Null value will be replaced by System.DBNull.Value.</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.AddParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Adds a value to the end of the <see cref="P:System.Data.Common.DbCommand.Parameters"/> property.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to be added. Null value will be replaced by System.DBNull.Value.</param>
            <param name="type">Type of parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.AddParameter``1(``0)">
            <summary>
            Add all properties / values to the end of the <see cref="P:System.Data.Common.DbCommand.Parameters"/> property.
            If a property is already exist in Parameters collection, the parameter is removed and new added with new value.
            </summary>
            <param name="values">Object or anonymous object to convert all properties to parameters</param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.OnExceptionOccured(Apps72.Dev.Data.ExceptionOccuredEventArgs)">
            <summary>
            Raises the ExceptionOccured event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Dispose">
            <summary>
            Dispose the object and free ressources
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Dispose(System.Boolean)">
            <summary>
            Dispose the object and free ressources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Finalize">
            <summary>
            Dispose the object and free ressources
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteInternalDataSet(System.Boolean)">
            <summary>
            Execute the query and return an internal DataTable with all data.
            </summary>
            <param name="firstRowOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ExecuteInternalDataTable(System.Boolean)">
            <summary>
            Execute the query and return an internal DataTable with all data.
            </summary>
            <param name="firstRowOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ResetException">
            <summary>
            Set the last raised exception to null
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.ThrowSqlExceptionOrDefaultValue``1(System.Data.Common.DbException)">
            <summary>
            Raise the Exception if the ThrowException property is set to TRUE
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="ex">Exception</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Update_CommandDotCommandText_If_CommandText_IsNew">
            <summary>
            Check if the this.CommandText is different of Command.CommandText and updated it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.GetCommandTextWithTags">
            <summary>
            Returns the complete CommandText, including Tags in comments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.GetTagsAsSqlComments">
            <summary>
            Returns the tags formatted in SQL comments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.GetInternalCommand">
            <summary/>
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Apps72#Dev#Data#IDatabaseCommand#Clear">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Apps72#Dev#Data#IDatabaseCommand#Prepare">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Apps72#Dev#Data#IDatabaseCommand#ActionBeforeExecution">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.DatabaseCommand.Apps72#Dev#Data#IDatabaseCommand#ActionAfterExecution">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Apps72#Dev#Data#IDatabaseCommand#AddParameter(System.String,System.Object)">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Apps72#Dev#Data#IDatabaseCommand#AddParameter(System.String,System.Object,System.Data.DbType)">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Apps72#Dev#Data#IDatabaseCommand#AddParameter(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Apps72#Dev#Data#IDatabaseCommand#AddParameter``1(``0)">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.DatabaseCommand.Apps72#Dev#Data#IDatabaseCommand#WithTag(System.String)">
            <summary />
        </member>
        <member name="T:Apps72.Dev.Data.Convertor.DbTypeMap">
            <summary>
            DbType Mapping, using connection.GetSchema("DataTypes").
            This schema collection exposes information about the data types that are supported by the database 
            that the .NET Framework managed provider is currently connected to
            see https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/common-schema-collections
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DbTypeMap.Initialize(System.Data.Common.DbConnection)">
            <summary>
            Initialize the DbTypeMap
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DbTypeMap.DotNetToCSharpType(System.Type)">
            <summary>
            Returns the CSharp type of a .NET Type
            String.Int32 => int
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DbTypeMap.FirstType(System.String)">
            <summary>
            Returns the first element using the <paramref name="sqlType"/>.
            </summary>
            <param name="sqlType">Name of SQL type to search.</param>
            <returns></returns>
        </member>
        <member name="T:Apps72.Dev.Data.Convertor.DbTypeMapEntry">
            <summary>
            Mapping type structure to convert C# type to DbType, or to SqlDbType
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DbTypeMapEntry.#ctor(System.String,System.Int32,System.String)">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Convertor.DbTypeMapEntry.SqlTypeName">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Convertor.DbTypeMapEntry.EnumProviderDbType">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Convertor.DbTypeMapEntry.DotNetDataType">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Convertor.DbTypeMapEntry.DotNetType">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Convertor.DbTypeMapEntry.DbType">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DbTypeMapEntry.GetProviderDbType``1">
            <summary />
        </member>
        <member name="T:Apps72.Dev.Data.Convertor.Type2DbType">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.Type2DbType.#ctor(System.Type,System.Data.DbType)">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Convertor.Type2DbType.Type">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Convertor.Type2DbType.DbType">
            <summary />
        </member>
        <member name="T:Apps72.Dev.Data.Convertor.DynamicConvertor">
            <summary>
            Helpers to build and instanciate class.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DynamicConvertor.IsDynamic(System.Type)">
            <summary>
            Returns True if the <paramref name="type"/> is dynamic.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DynamicConvertor.GetDynamicObject(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Returns a new object created and instanciated dynamically, and containing specified properties.
            </summary>
            <param name="className">Name of the class to create.</param>
            <param name="properties">List of properties to add to this class.</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DynamicConvertor.GetDynamicType(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Returns a new type created dynamically and containing specified properties.
            </summary>
            <param name="className">Name of the type to create.</param>
            <param name="properties">List of properties to add to this type.</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DynamicConvertor.AddProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Add a new property dynamically to the <paramref name="typeBuilder"/>.
            </summary>
            <param name="typeBuilder">Builder of this type.</param>
            <param name="propertyName">Name of the new property</param>
            <param name="propertyType">Type of the new property</param>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.DynamicConvertor.KeepOnlyLettersOrDigits(System.String)">
            <summary>
            Returns a similar string with only digits (0 .. 9) or letter (a .. z; A .. Z).
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.TypeExtension.IsAnonymousType(System.Type)">
            <summary>
            Returns True if the specified type is an AnonymousType.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.TypeExtension.IsPrimitive(System.Type)">
            <summary>
            Returns True if this object is a simple type.
            See https://msdn.microsoft.com/en-us/library/system.type.isprimitive.aspx
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.TypeExtension.IsNullable(System.Type)">
            <summary>
            Returns True if the specified type is nullable
            See http://stackoverflow.com/questions/8939939/correct-way-to-check-if-a-type-is-nullable
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.TypeExtension.GetNullableSubType(System.Type)">
            <summary>
            Returns the sub-type if specified type is null or
            returns the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.TypeExtension.RemoveExtraChars(System.String)">
            <summary>
            Remove invalid chars for CSharp class and property names.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks>See https://msdn.microsoft.com/en-us/library/gg615485.aspx </remarks>
        </member>
        <member name="M:Apps72.Dev.Data.Convertor.TypeExtension.ToBoolean(System.String)">
            <summary>
            Convert the string to a boolean
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Apps72.Dev.Data.ExceptionOccuredEventArgs">
            <summary>
            Argument of ExceptionOccured event.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.ExceptionOccuredEventArgs.Exception">
            <summary>
            Gets or sets the exception occured
            </summary>
        </member>
        <member name="T:Apps72.Dev.Data.FluentQuery">
            <summary>
            Common class to manage Fluent queries
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.#ctor(Apps72.Dev.Data.DatabaseCommand)">
            <summary>
            Creates a new instance of FluentQuery
            </summary>
            <param name="databaseCommand"></param>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.WithTransaction(System.Data.Common.DbTransaction)">
            <summary>
            Includes an active transaction to the current query.
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.ForSql(Apps72.Dev.Data.SqlString)">
            <summary>
            Add a SQL Query to the current command.
            </summary>
            <param name="commandText">SQL query command</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.AddParameter``1(System.String,``0)">
            <summary>
            Add a new parameter to the current query.
            </summary>
            <typeparam name="T">Type of this parameter</typeparam>
            <param name="name">Name of this parameter</param>
            <param name="value">Value of this parameter</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.AddParameter``1(System.String,``0,System.Data.DbType)">
            <summary>
            Add a new parameter to the current query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of this parameter</param>
            <param name="value">Value of this paramater</param>
            <param name="type">Type of this parameter</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.AddParameter``1(System.String,``0,System.Data.DbType,System.Int32)">
            <summary>
            Add a new parameter to the current query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of this parameter</param>
            <param name="value">Value of this paramater</param>
            <param name="type">Type of this parameter</param>
            <param name="size">Size of this parameter</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.AddParameter``1(``0)">
            <summary>
            Add a new parameter to the current query.
            </summary>
            <typeparam name="T">Type of this parameter</typeparam>
            <param name="values">Object contains properties to define parameter names and values</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.ExecuteNonQuery">
            <summary>
            Execute the query and return the count of modified rows
            </summary>
            <returns>Count of modified rows</returns>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.ExecuteRow``1">
            <summary>
            Execute the query and return a new instance of T with the first row of results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>First row of results</returns>
            <example>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.ExecuteRow``1(``0)">
            <summary>
            Execute the query and fill the specified T object with the first row of results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="itemOftype"></param>
            <returns>First row of results</returns>
            <example>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.ExecuteScalar">
            <summary>
            Execute the query and return the first column of the first row of results
            </summary>
            <returns>Object - Result</returns>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.ExecuteScalar``1">
            <summary>
            Execute the query and return the first column of the first row of results
            </summary>
            <typeparam name="T">Return type</typeparam>
            <returns>Result</returns>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.ExecuteTable``1">
            <summary>
            Execute the query and return an array of new instances of typed results filled with data table result.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>Array of typed results</returns>
            <example>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.FluentQuery.ExecuteTable``1(``0)">
            <summary>
            Execute the query and return an array of new instances of typed results filled with data table result.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="itemOftype"></param>
            <returns>Array of typed results</returns>
            <example>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="T:Apps72.Dev.Data.Generator.DatabaseFamily">
            <summary>
            Type of Database
            </summary>
        </member>
        <member name="F:Apps72.Dev.Data.Generator.DatabaseFamily.Unknown">
            <summary />
        </member>
        <member name="F:Apps72.Dev.Data.Generator.DatabaseFamily.SqlServer">
            <summary />
        </member>
        <member name="F:Apps72.Dev.Data.Generator.DatabaseFamily.Oracle">
            <summary />
        </member>
        <member name="F:Apps72.Dev.Data.Generator.DatabaseFamily.Sqlite">
            <summary />
        </member>
        <member name="T:Apps72.Dev.Data.Generator.EntityGenerator">
            <summary>
            Extractor of all tables and columns properties from Database specified in the ConnectionString.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Generator.EntityGenerator.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of EntitiesGenerator
            </summary>
            <param name="connection">Connection to retrieve all tables and columns</param>
        </member>
        <member name="P:Apps72.Dev.Data.Generator.EntityGenerator.Connection">
            <summary>
            Gets the DbConnection connected to the database
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Generator.EntityGenerator.ProductName">
            <summary>
            Gets the Database server name
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Generator.EntityGenerator.ProductVersion">
            <summary>
            Gets the Database server version
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Generator.EntityGenerator.TablesAndViews">
            <summary>
            Gets all tables and views founds
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Generator.EntityGenerator.Tables">
            <summary>
            Gets all tables founds
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Generator.EntityGenerator.Views">
            <summary>
            Gets all views founds
            Not developed (always empty)
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Generator.EntityGenerator.SearchAndFill(System.Data.Common.DbConnection)">
            <summary>
            Search all columns definitions
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Apps72.Dev.Data.Generator.EntityGenerator.GetTablesDescription">
            <summary>
            Search all table names and columns names in Database
            </summary>
            <remarks>
            See https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/getschema-and-schema-collections
            </remarks>
        </member>
        <member name="M:Apps72.Dev.Data.Generator.EntityGenerator.ConvertDescriptionsToTables(System.Collections.Generic.IEnumerable{Apps72.Dev.Data.Generator.TableAndColumn})">
            <summary>
            Tranform the list of tables and columns (description of database tables) to a list of DataTable.
            </summary>
            <param name="descriptions"></param>
            <returns></returns>
        </member>
        <member name="T:Apps72.Dev.Data.Generator.SchemaColumnsFields">
            <summary>
            Fields used with DBConnection.GetSchema("Columns")
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Generator.SchemaColumnsFields.#ctor(System.String)">
            <summary>
            Initializes a list of fields to use with DBConnection.GetSchema("Columns")
            </summary>
            <param name="productName"></param>
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.NAME">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.SequenceNumber">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.SchemaName">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.TableName">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.ColumnName">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.ColumnType">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.ColumnSize">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.NumericPrecision">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.NumericScale">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.IsColumnNullable">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.SchemaColumnsFields.DatabaseFamily">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.Generator.SchemaColumnsFields.FindDatabaseFamily(System.String)">
            <summary />
        </member>
        <member name="T:Apps72.Dev.Data.Generator.TableAndColumn">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.DatabaseFamily">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.SequenceNumber">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.SchemaName">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.TableName">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.ColumnName">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.ColumnType">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.ColumnSize">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.NumericPrecision">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.NumericScale">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.IsColumnNullable">
            <summary />
        </member>
        <member name="P:Apps72.Dev.Data.Generator.TableAndColumn.IsView">
            <summary />
        </member>
        <member name="T:Apps72.Dev.Data.IDatabaseCommand">
            <summary>
            Base Interface to manage all DataBaseCommands
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.CommandText">
            <summary>
            Gets or sets the sql query
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.CommandType">
            <summary>
            Gets or sets the command type
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.Tags">
            <summary>
            Gets a list of tags, used to annotate the SQL query (using SQL comments)
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.Transaction">
            <summary>
            Gets or sets the current transaction
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.Parameters">
            <summary>
            Gets sql parameters of the query
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.ThrowException">
            <summary>
            Enable or disable the raise of exceptions when queries are executed.
            Default is True (Enabled).
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.Log">
            <summary>
            Set this property to log the SQL generated by this class to the given delegate. 
            For example, to log to the console, set this property to Console.Write.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.Formatted">
            <summary>
            Gets the <see cref="P:Apps72.Dev.Data.IDatabaseCommand.CommandText"/> where parameters are filled by values.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.ActionBeforeExecution">
            <summary>
            Set this property to execute an action immediately BEFORE the database request.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.ActionAfterExecution">
            <summary>
            Set this property to execute an action immediately AFTER the database request,
            and before the type convertions.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.Clear">
            <summary>
            Delete the CommandText and the all sql parameters
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.Prepare">
            <summary>
            Prepare a query
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.WithTag(System.String)">
            <summary>
            Annotate the SQL query with a tag (using SQL comments)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.TransactionBegin">
            <summary>
            Begin a transaction into the database
            </summary>
            <returns>Transaction</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.TransactionCommit">
            <summary>
            Commit the current transaction to the database
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.TransactionRollback">
            <summary>
            Rollback the current transaction 
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.AddParameter(System.String,System.Object)">
            <summary>
            Adds a value to the end of the <see cref="P:Apps72.Dev.Data.IDatabaseCommand.Parameters"/> property.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to be added. Null value will be replaced by System.DBNull.Value.</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.AddParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Adds a value to the end of the <see cref="P:Apps72.Dev.Data.IDatabaseCommand.Parameters"/> property.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to be added. Null value will be replaced by System.DBNull.Value.</param>
            <param name="type">Type of parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.AddParameter(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Adds a value to the end of the <see cref="P:Apps72.Dev.Data.IDatabaseCommand.Parameters"/> property.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to be added. Null value will be replaced by System.DBNull.Value.</param>
            <param name="type">Type of parameter.</param>
            <param name="size">Size of parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.AddParameter``1(``0)">
            <summary>
            Add all properties / values to the end of the <see cref="P:Apps72.Dev.Data.IDatabaseCommand.Parameters"/> property.
            If a property is already exist in Parameters collection, the parameter is removed and new added with new value.
            </summary>
            <param name="values">Object or anonymous object to convert all properties to parameters</param>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteDataSet``5(``0,``1,``2,``3,``4)">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <typeparam name="W">Object type for fourth table</typeparam>
            <typeparam name="X">Object type for fifth table</typeparam>
            <returns>List of array of typed results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteDataSet``4(``0,``1,``2,``3)">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <typeparam name="W">Object type for fourth table</typeparam>
            <returns>List of array of typed results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteDataSet``3(``0,``1,``2)">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <returns>List of array of typed results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteDataSet``2(``0,``1)">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <returns>List of array of typed results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteDataSet``5">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <typeparam name="W">Object type for fourth table</typeparam>
            <typeparam name="X">Object type for fifth table</typeparam>
            <returns>List of array of typed results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteDataSet``4">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <typeparam name="W">Object type for fourth table</typeparam>
            <returns>List of array of typed results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteDataSet``3">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <typeparam name="V">Object type for third table</typeparam>
            <returns>List of array of typed results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteDataSet``2">
            <summary>
            Execute the query and return a list or array of new instances of typed results filled with data table results.
            </summary>
            <typeparam name="T">Object type for first table</typeparam>
            <typeparam name="U">Object type for second table</typeparam>
            <returns>List of array of typed results</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteTable``1">
            <summary>
            Execute the query and return an array of new instances of typed results filled with data table result.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>Array of typed results</returns>
            <example>
            <code>
              Employee[] emp = cmd.ExecuteTable&lt;Employee&gt;();
              var x = cmd.ExecuteTable&lt;Employee&gt;();
            </code>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteTable``1(``0)">
            <summary>
            Execute the query and return an array of new instances of typed results filled with data table result.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="itemOftype"></param>
            <returns>Array of typed results</returns>
            <example>
            <code>
              Employee emp = new Employee();
              var x = cmd.ExecuteTable(new { emp.Age, emp.Name });
              var y = cmd.ExecuteTable(new { Age = 0, Name = "" });
            </code>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteTable``1(System.Func{Apps72.Dev.Data.Schema.DataRow,``0})">
            <summary>
            Execute the query and return an array of new instances of typed results filled with data table result.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="converter">Conversion function to customize the transformation of a DataRow to an object of <typeparamref name="T"/> </param>
            <returns>Array of typed results</returns>    
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteNonQuery">
            <summary>
            Execute the query and return the count of modified rows
            </summary>
            <returns>Count of modified rows</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteScalar">
            <summary>
            Execute the query and return the first column of the first row of results
            </summary>
            <returns>Object - Result</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteScalar``1">
            <summary>
            Execute the query and return the first column of the first row of results
            </summary>
            <typeparam name="T">Return type</typeparam>
            <returns>Result</returns>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteRow``1">
            <summary>
            Execute the query and return a new instance of T with the first row of results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>First row of results</returns>
            <example>
            <code>
              Employee emp = cmd.ExecuteRow&lt;Employee&gt;();
            </code>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteRow``1(``0)">
            <summary>
            Execute the query and fill the specified T object with the first row of results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="itemOftype"></param>
            <returns>First row of results</returns>
            <example>
            <code>
              Employee emp = new Employee();
              var x = cmd.ExecuteRow(new { emp.Age, emp.Name });
              var y = cmd.ExecuteRow(new { Age = 0, Name = "" });
              var z = cmd.ExecuteRow(emp);
            </code>
            <remarks>
              Result object property (ex. Employee.Name) may be tagged with the ColumnAttribute 
              to set which column name (ex. [Column("Name")] must be associated to this property.
            </remarks>
            </example>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.ExecuteRow``1(System.Func{Apps72.Dev.Data.Schema.DataRow,``0})">
            <summary>
            Execute the query and fill the specified T object with the first row of results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="converter">Conversion function to customize the transformation of a DataRow to an object of <typeparamref name="T"/> </param>
            <returns>First row of results</returns>
        </member>
        <member name="P:Apps72.Dev.Data.IDatabaseCommand.Exception">
            <summary>
            Gets the last raised exception 
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.IDatabaseCommand.Query(Apps72.Dev.Data.SqlString)">
            <summary>
            Returns a Fluent Query tool to execute SQL request.
            </summary>
            <param name="commandText">SQL query command</param>
        </member>
        <member name="T:Apps72.Dev.Data.Schema.DataColumn">
            <summary>
            Represents the schema of a column in a Table.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataColumn.#ctor(Apps72.Dev.Data.Schema.DataTable)">
            <summary>
            Initializes a new instance of a Column
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.Table">
            <summary>
            Gets the System.Data.DataTable to which the column belongs to.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.Ordinal">
            <summary>
            Gets the (zero-based) position of the column in the Columns collection.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.ColumnName">
            <summary>
            Gets the name of the column
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.DotNetColumnName">
            <summary>
            Gets the name of the column
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.SqlType">
            <summary>
            Gets the Original SQL DataType retrieve in the database (ex. INTEGER)
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.DataType">
            <summary>
            Gets the type of data stored in the column.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.IsNullable">
            <summary>
            Gets a value that indicates whether null values are allowed in this column
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.DotNetType">
            <summary>
            Gets the DataType formated as a string
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.CSharpType">
            <summary>
            Gets the DataType formated as a string
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.DotNetTypeNullable">
            <summary>
            Gets the DataType formated as a string suffixed by an option "?"
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataColumn.CSharpTypeNullable">
            <summary>
            Gets the DataType formated as a string suffixed by an option "?"
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataColumn.GetTypeNullable(System.Boolean)">
            <summary>
            Returns the C# type suffixed by ?, if allowed
            Ex. Int32  -> Int32?
                String -> String
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apps72.Dev.Data.Schema.DataParameter">
            <summary>
            Tools to manage DbParameters 
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataParameter.AddValues``2(System.Data.Common.DbParameterCollection,``0)">
            <summary>
            Creates a new instance of DbParameter[] with ParameterName, Value and IsNullable properties 
            sets to value's properties.
            </summary>
            <typeparam name="T">Type of object with properties to convert in Parameters</typeparam>
            <typeparam name="V">DbParameter type (SqlParameter, ...)</typeparam>
            <param name="parameters"></param>
            <param name="values"></param>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataParameter.AddValues``1(System.Data.Common.DbCommand,``0)">
            <summary>
            Creates a new instance of DbParameter[] with ParameterName, Value and IsNullable properties 
            sets to value's properties.
            </summary>
            <typeparam name="T">Type of object with properties to convert in Parameters</typeparam>
            <param name="command"></param>
            <param name="values"></param>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataParameter.ToParameters``2(System.Data.Common.DbCommand,``0)">
            <summary>
            Creates a new instance of DbParameter[] with ParameterName, Value and IsNullable properties 
            sets to value's properties.
            </summary>
            <typeparam name="T">Type of object with properties to convert in Parameters</typeparam>
            <typeparam name="U">DbParameter type (SqlParameter, ...)</typeparam>
            <param name="command"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Apps72.Dev.Data.Schema.DataRow">
            <summary>
            Represents a row of data in a DataTable
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataRow.#ctor(Apps72.Dev.Data.Schema.DataTable,System.Object[])">
            <summary>
            Initializes a new instance of a DataRow with an array os simple item
            </summary>
            <param name="table"></param>
            <param name="values"></param>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataRow.#ctor(Apps72.Dev.Data.Schema.DataTable,System.Object)">
            <summary>
            Initializes a new instance of a DataRow from a complex type with properties.
            </summary>
            <param name="table"></param>
            <param name="values"></param>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataRow.Item(System.Int32)">
            <summary>
            Gets the data value for this column index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataRow.Item(System.String)">
            <summary>
            Gets the data value for this column name.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataRow.ItemArray">
            <summary>
            Gets all values as an Array of objects
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataRow.Table">
            <summary>
            Gets the System.Data.DataTable to which the column belongs to.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataRow.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataRow.ConvertTo``1">
            <summary>
            Creates a new instance of T type and sets all row values to the new T properties.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataRow.Field``1(System.String)">
            <summary>
            Provides strongly-typed access of the column values in the specified row.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataRow.Field``1(System.Int32)">
            <summary>
            Provides strongly-typed access of the column values in the specified row.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataRow.ConvertTo``1(``0)">
            <summary>
            If item is null, creates a new instance of T type and sets all row values to the new T properties.
            If item is not null, sets all row values to item object properties
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Apps72.Dev.Data.Schema.DataTable">
            <summary>
            Represents one table of in-memory data.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataTable.#ctor">
            <summary>
            Initialize a new instance of DataTable
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataTable.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initialize a new instance of DataTable,
            based on a single Row/Col value.
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <param name="firstColRowValue"></param>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataTable.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            Initialize a new instance of DataTable, 
            load and fill all data (Rows and Columns) from the DbDataReader.
            </summary>
            <param name="reader"></param>
            <param name="firstRowOnly"></param>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataTable.Name">
            <summary>
            Gets the name of this Table
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataTable.Schema">
            <summary>
            Gets the Schema of this table
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataTable.SchemaAndName">
            <summary>
            Gets the Schema and the Name of this table, separated by an underscore.
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataTable.IsView">
            <summary>
            Gets True if this 'Table' is a View.
            Not developed (always False)
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataTable.Columns">
            <summary>
            Gets the Columns properties
            </summary>
        </member>
        <member name="P:Apps72.Dev.Data.Schema.DataTable.Rows">
            <summary>
            Gets all Rows values
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataTable.ConvertTo``1">
            <summary>
            Creates a new instance of T type and sets all row values to the new T properties.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataTable.Load(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            Load and fill all data (Rows and Columns) from the DbDataReader.
            </summary>
            <param name="reader"></param>
            <param name="firstRowOnly"></param>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataTable.Load(System.Collections.Generic.IEnumerable{System.Object[]},System.Boolean)">
            <summary>
            Load and fill all data (Rows and Columns) from the array of object[].
            </summary>
            <param name="arrayOfvalues"></param>
            <param name="firstRowOnly"></param>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataTable.Load``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Load and fill all data (Rows and Columns) from the array of typed object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrayOfvalues"></param>
            <param name="firstRowOnly"></param>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataTable.FillColumnsProperties(System.Data.Common.DbDataReader)">
            <summary>
            Fill all columns properties
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.Schema.DataTable.FillColumnsProperties(System.Object)">
            <summary>
            Fill all columns properties
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Apps72.Dev.Data.SqlString">
            <summary>
            SQL Command Text
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.#ctor">
            <summary>
            Initializes a new empty instance of SqlString.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.#ctor(System.String)">
            <summary>
            Initializes a new instance of SqlString.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of SqlString.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Apps72.Dev.Data.SqlString.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.Clear">
            <summary>
            Removes all characters from the current SqlString instance.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.Append(System.String)">
            <summary>
            Appends the specified string to this instance.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.AppendLine(System.String)">
            <summary>
            Appends the specified string followed by the default line terminator
            to the end of the current SqlString instance.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.AppendFormat(System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which contains
            zero or more format items, to this instance. Each format item is replaced by
            the string representation of a corresponding argument in a parameter array.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.AppendLineFormat(System.String,System.Object[])">
            <summary>
            Appends the string followed by the default line terminator 
            returned by processing a composite format string, which contains
            zero or more format items, to this instance. Each format item is replaced by
            the string representation of a corresponding argument in a parameter array.
            </summary>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.Replace(System.String,System.String)">
            <summary>
            Replaces all occurrences of a specified string in this instance with another
            specified string.
            </summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string that replaces oldValue, or null.</param>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.op_Implicit(System.String)~Apps72.Dev.Data.SqlString">
            <summary>
            Implicit conversion of a string to a SqlString.
            So, you can use `SqlString sql = "SELECT * FROM MyTable"`.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.op_Implicit(System.Text.StringBuilder)~Apps72.Dev.Data.SqlString">
            <summary>
            Implicit conversion of a string to a SqlString.
            So, you can use `SqlString sql = "SELECT * FROM MyTable"`.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.ToString">
            <summary>
            Returns the SQL String content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.op_Equality(Apps72.Dev.Data.SqlString,Apps72.Dev.Data.SqlString)">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.op_Inequality(Apps72.Dev.Data.SqlString,Apps72.Dev.Data.SqlString)">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.Equals(System.Object)">
            <summary />
        </member>
        <member name="M:Apps72.Dev.Data.SqlString.GetHashCode">
            <summary />
        </member>
        <member name="T:DataExtensions">
            <summary>
            Helper Extensions to simplify data management
            </summary>
        </member>
        <member name="M:DataExtensions.ConvertToDBNull(System.Data.Common.DbParameter)">
            <summary>
            Convert the parameter value to a DBNull.Value if this value is null.
            </summary>
            <param name="parameter"></param>
        </member>
    </members>
</doc>
